#!/usr/bin/env python3
#
# Kata 14
# Chay Casso, 2/15/18

import random
import textwrap

starter_file = "sherlock.txt"
KATA_LENGTH = 100  # This is the total length to be generated.

with open(starter_file, 'r')as infile:
    body_text = infile.read()
# body_text = body_text.lower()
body_text = body_text.replace("\n"," ")
body_text = body_text.replace("--",", ")
body_text = body_text.replace(";", ",")
body_text = body_text.replace('\"', '')
body_text = body_text.replace("\'", "")
body_text = body_text.replace(" (", ", ")
body_text = body_text.replace(")", ", ")
body_text = body_text.replace(", ", ". ")
# body_text = body_text.replace(" i ", " I ")
# Specifically testing flipping the ", " to " ," here to attempt to keep commas as valid objects.
# body_text = body_text.replace(", ", " ,")
body_text = body_text.strip()
tbl_body_text = body_text.split(". ")
dict_kata = {}
for element in tbl_body_text:
    tbl_word_list = element.split(" ")
    for i in range(len(tbl_word_list)):
        if i < 2: continue
        kata_input = tbl_word_list[i-2] + " " + tbl_word_list[i-1]
        kata_input = kata_input.replace(",", "")
        kata_input = kata_input.replace(".", "")
        # print(kata_input)
        if kata_input in dict_kata:
            dict_kata[kata_input].append(tbl_word_list[i])
        else:
            dict_kata[kata_input]=[tbl_word_list[i]]

# print(dict_kata)
i = 2 # Skipping the first two words, which will be generated by generate_kata_seed.
tbl_kata_words = [] # This is the eventual output, though it will need to be concatenated.


def generate_kata_seed(tbl_words):
    # So we generate an initial seed for the Kata from a random draw of the list of possible initial keys.
    tbl_key_list = list(dict_kata.keys())
    kata_seed = (tbl_key_list[random.randrange(0, len(tbl_key_list))])

    # We don't want random characters in the kata_seed.
    kata_seed = kata_seed.replace(",", "")
    kata_seed = kata_seed.replace(".", "")
    kata_seed = kata_seed.replace("?", "")
    tbl_words.append(kata_seed.split(" ")[0].capitalize())
    tbl_words.append(kata_seed.split(" ")[1])
    return tbl_words


generate_kata_seed(tbl_kata_words)
while True:
    if ((tbl_kata_words[i - 2]).lower() + " " + tbl_kata_words[i - 1].lower()) in dict_kata:
        kata_next_word_list = (dict_kata[(tbl_kata_words[i - 2]).lower() + " " + tbl_kata_words[i - 1].lower()])
        kata_next_word = kata_next_word_list[random.randrange(0,len(kata_next_word_list))]
        tbl_kata_words.append(kata_next_word)
        i = i + 1
    else:
        # If there are no words to add to the current sentence, end it with a period.
        # If we are over our assigned length at that point, break out of the while loop.
        tbl_kata_words[i - 1] = tbl_kata_words[i - 1] + ". "
        if len(tbl_kata_words) > KATA_LENGTH and "." in tbl_kata_words[-1]:
            break
        generate_kata_seed(tbl_kata_words)
        i = i + 2 # Again, skipping the next two words which are generated by kata_seed again.

output_text = tbl_kata_words[0]
for j in range(1,len(tbl_kata_words)):
    # This is a further attempt to emulate the comma structure in the original text.
    if "," in tbl_kata_words[j]:
        tbl_kata_words[j] = tbl_kata_words[j].replace(",", ", ")
        output_text = output_text + tbl_kata_words[j]
    else:
        output_text = output_text + " " + tbl_kata_words[j]
output_text = textwrap.fill(output_text, 80)
print(output_text)

